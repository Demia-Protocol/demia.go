package iotago_test

import (
	"bytes"
	"encoding/json"
	"math/rand"
	"os"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"github.com/iotaledger/hive.go/serializer/v2"
	iotago "github.com/iotaledger/iota.go/v3"
	"github.com/iotaledger/iota.go/v3/tpkg"
)

func TestMain(m *testing.M) {
	rand.Seed(time.Now().UnixNano())

	// call the tests
	os.Exit(m.Run())
}

func TestBlock_DeSerialize(t *testing.T) {
	tests := []deSerializeTest{
		{
			name:   "ok - no payload",
			source: tpkg.RandBlock(1337),
			target: &iotago.Block{},
		},
		{
			name:   "ok - transaction",
			source: tpkg.RandBlock(iotago.PayloadTransaction),
			target: &iotago.Block{},
		},
		{
			name:   "ok - milestone",
			source: tpkg.RandBlock(iotago.PayloadMilestone),
			target: &iotago.Block{},
		},
		{
			name:   "ok - tagged data",
			source: tpkg.RandBlock(iotago.PayloadTaggedData),
			target: &iotago.Block{},
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, tt.deSerialize)
	}
}

func TestBlock_MinSize(t *testing.T) {

	block := &iotago.Block{
		ProtocolVersion: tpkg.TestProtocolVersion,
		Parents:         tpkg.SortedRandBlockIDs(1),
		Payload:         nil,
	}

	blockBytes, err := block.Serialize(serializer.DeSeriModeNoValidation, tpkg.TestProtoParas)
	require.NoError(t, err)

	block2 := &iotago.Block{}
	_, err = block2.Deserialize(blockBytes, serializer.DeSeriModePerformValidation, tpkg.TestProtoParas)
	require.NoError(t, err)
	require.Equal(t, block, block2)
}

func TestBlock_DeserializationNotEnoughData(t *testing.T) {

	blockBytes := []byte{tpkg.TestProtocolVersion, 1}

	block := &iotago.Block{}
	_, err := block.Deserialize(blockBytes, serializer.DeSeriModePerformValidation, tpkg.TestProtoParas)
	require.ErrorIs(t, err, serializer.ErrDeserializationNotEnoughData)
}

func TestBlock_UnmarshalJSON(t *testing.T) {
	data := `
		{
		  "protocolVersion": 1,
		  "parents": ["0xf532a53545103276b46876c473846d98648ee418468bce76df4868648dd73e5d", "0x78d546b46aec4557872139a48f66bc567687e8413578a14323548732358914a2"],
		  "payload": {
			"type": 6,
			"essence": {
			  "type": 1,
              "networkId": "1337133713371337",
			  "inputs": [
				{
				  "type": 0,
				  "transactionId": "0x162863a2f4b134d352a886bf9cfb08788735499694864753ee686e02b3763d9d",
				  "transactionOutputIndex": 3
				}
			  ],
			  "outputs": [
				{
				  "type": 3,
				  "address": {
					"type": 0,
					"address": "0x5f24ebcb5d48acbbfe6e7401b502ba7bb93acb3591d55eda7d32c37306cc805f"
				  },
				  "amount": "5710"
				}
			  ],
			  "payload": {
				"type": 5,
				"tag": "0x616c6c796f7572747269747362656c6f6e67746f7573",
				"data": "0xa487f431d852b060b49427f513dca1d5288e697e8bd9eb062534d09e7cb337ac"
			  }
			},
			"unlocks": [
			  {
				"type": 0,
				"signature": {
				  "type": 0,
				  "publicKey": "0xed3c3f1a319ff4e909cf2771d79fece0ac9bd9fd2ee49ea6c0885c9cb3b1248c",
				  "signature": "0x651941eddb3e68cb1f6ef4ef5b04625dcf5c70de1fdc4b1c9eadb2c219c074e0ed3c3f1a319ff4e909cf2771d79fece0ac9bd9fd2ee49ea6c0885c9cb3b1248c"
				}
			  }
			]
		  },
		  "nonce": "133945865838"
		}`

	block := &iotago.Block{}
	assert.NoError(t, json.Unmarshal([]byte(data), block))

	var emptyID = [32]byte{}
	for _, parent := range block.Parents {
		assert.False(t, bytes.Equal(parent[:], emptyID[:]))
	}

	blockJson, err := json.Marshal(block)
	assert.NoError(t, err)

	block2 := &iotago.Block{}
	assert.NoError(t, json.Unmarshal(blockJson, block2))

	assert.EqualValues(t, block, block2)

	minimal := `
		{
		  "parents": ["0x0000000000000000000000000000000000000000000000000000000000000000"]
		}`
	blockMinimal := &iotago.Block{}
	assert.NoError(t, json.Unmarshal([]byte(minimal), blockMinimal))

	assert.Len(t, blockMinimal.Parents, 1)
	for _, parent := range blockMinimal.Parents {
		assert.True(t, bytes.Equal(parent[:], emptyID[:]))
	}

	assert.Nil(t, blockMinimal.Payload)
	assert.Equal(t, blockMinimal.Nonce, uint64(0))
}

func TestBlock_TaggedModifiedId(t *testing.T) {
	data := `
		{
			"protocolVersion": 2,
			"parents": [
				"0x82250ba0299eb6a37858340bdf4436c3d5ca83ae7b0821cf702b6114f21582cb"
			],
			"payload": {
				"type": 5,
				"tag": "0xbdff99ecaf454b8e3f5ab32793c486802d55e2fb1623f0e3e8d65d35f5fbc9ee",
				"data": "0x00023000040000000193f26f4d022524aee42b37f57a739957bbcd04e0656590ee93fb932c007104ba30ebc9f0ff7937238a38a09108d7c68a36d043935e28e2489dd3bcec3b010b65ceb2ad2507d2da12834e54f97e1424b7b273060b9f5986dd2151b3931770378d257a2b0e0000013b634797fd6f313bac09a4af5575108f334865830f1e08b11fb4f458e694d4ea32008391a5fdbcbf68669aaad4ab5e0ac201e8dfef8c00c46949bac1435fd984f2a004a9e069a3d2df4a371fc698ca2cdb5fca8eb329d165b9ba570d4994f67867af8c9d125a46a0f5a73a406f12e8f5793f8b003346a8ad575444fc043a40b2f60b49fca5c4b2ae979025a8ff7c63af726f20d436e813b9bca557745149f5b2df7c61190241db74dd2cd3bf69680df8856c5e08",
				"publicKey": "0x7104ba30ebc9f0ff7937238a38a09108d7c68a36d043935e28e2489dd3bcec3b",
				"signature": "0xb0170fc919912778d2300780cbbda66107d92d645b84d963adbf2ca6698787bbc8dbdebc9e390458239b36ea5df5aba964d6c0d67d944b568c9903b84bdd0c04"
			},
			"nonce": "670841"
		}`

	block := &iotago.Block{}
	assert.NoError(t, json.Unmarshal([]byte(data), block))
	id, _ := block.ID()

	blockID := &iotago.BlockID{}
	assert.NoError(t, blockID.UnmarshalText([]byte("1f313a04206a0cf2ff0641d79961101416e04dd8c46d1400a354f8b1791d08d1")))
	assert.Equal(t, blockID, &id)

	bytes, _ := block.Serialize(serializer.DeSeriModePerformValidation, tpkg.TestProtoParas)
	actualBytes := []byte{0x2, 0x1, 0x82, 0x25, 0xb, 0xa0, 0x29, 0x9e, 0xb6, 0xa3, 0x78, 0x58, 0x34, 0xb, 0xdf, 0x44, 0x36, 0xc3, 0xd5, 0xca, 0x83, 0xae, 0x7b, 0x8, 0x21, 0xcf, 0x70, 0x2b, 0x61, 0x14, 0xf2, 0x15, 0x82, 0xcb, 0xaf, 0x1, 0x0, 0x0, 0x5, 0x0, 0x0, 0x0, 0x20, 0xbd, 0xff, 0x99, 0xec, 0xaf, 0x45, 0x4b, 0x8e, 0x3f, 0x5a, 0xb3, 0x27, 0x93, 0xc4, 0x86, 0x80, 0x2d, 0x55, 0xe2, 0xfb, 0x16, 0x23, 0xf0, 0xe3, 0xe8, 0xd6, 0x5d, 0x35, 0xf5, 0xfb, 0xc9, 0xee, 0x24, 0x1, 0x0, 0x0, 0x0, 0x2, 0x30, 0x0, 0x4, 0x0, 0x0, 0x0, 0x1, 0x93, 0xf2, 0x6f, 0x4d, 0x2, 0x25, 0x24, 0xae, 0xe4, 0x2b, 0x37, 0xf5, 0x7a, 0x73, 0x99, 0x57, 0xbb, 0xcd, 0x4, 0xe0, 0x65, 0x65, 0x90, 0xee, 0x93, 0xfb, 0x93, 0x2c, 0x0, 0x71, 0x4, 0xba, 0x30, 0xeb, 0xc9, 0xf0, 0xff, 0x79, 0x37, 0x23, 0x8a, 0x38, 0xa0, 0x91, 0x8, 0xd7, 0xc6, 0x8a, 0x36, 0xd0, 0x43, 0x93, 0x5e, 0x28, 0xe2, 0x48, 0x9d, 0xd3, 0xbc, 0xec, 0x3b, 0x1, 0xb, 0x65, 0xce, 0xb2, 0xad, 0x25, 0x7, 0xd2, 0xda, 0x12, 0x83, 0x4e, 0x54, 0xf9, 0x7e, 0x14, 0x24, 0xb7, 0xb2, 0x73, 0x6, 0xb, 0x9f, 0x59, 0x86, 0xdd, 0x21, 0x51, 0xb3, 0x93, 0x17, 0x70, 0x37, 0x8d, 0x25, 0x7a, 0x2b, 0xe, 0x0, 0x0, 0x1, 0x3b, 0x63, 0x47, 0x97, 0xfd, 0x6f, 0x31, 0x3b, 0xac, 0x9, 0xa4, 0xaf, 0x55, 0x75, 0x10, 0x8f, 0x33, 0x48, 0x65, 0x83, 0xf, 0x1e, 0x8, 0xb1, 0x1f, 0xb4, 0xf4, 0x58, 0xe6, 0x94, 0xd4, 0xea, 0x32, 0x0, 0x83, 0x91, 0xa5, 0xfd, 0xbc, 0xbf, 0x68, 0x66, 0x9a, 0xaa, 0xd4, 0xab, 0x5e, 0xa, 0xc2, 0x1, 0xe8, 0xdf, 0xef, 0x8c, 0x0, 0xc4, 0x69, 0x49, 0xba, 0xc1, 0x43, 0x5f, 0xd9, 0x84, 0xf2, 0xa0, 0x4, 0xa9, 0xe0, 0x69, 0xa3, 0xd2, 0xdf, 0x4a, 0x37, 0x1f, 0xc6, 0x98, 0xca, 0x2c, 0xdb, 0x5f, 0xca, 0x8e, 0xb3, 0x29, 0xd1, 0x65, 0xb9, 0xba, 0x57, 0xd, 0x49, 0x94, 0xf6, 0x78, 0x67, 0xaf, 0x8c, 0x9d, 0x12, 0x5a, 0x46, 0xa0, 0xf5, 0xa7, 0x3a, 0x40, 0x6f, 0x12, 0xe8, 0xf5, 0x79, 0x3f, 0x8b, 0x0, 0x33, 0x46, 0xa8, 0xad, 0x57, 0x54, 0x44, 0xfc, 0x4, 0x3a, 0x40, 0xb2, 0xf6, 0xb, 0x49, 0xfc, 0xa5, 0xc4, 0xb2, 0xae, 0x97, 0x90, 0x25, 0xa8, 0xff, 0x7c, 0x63, 0xaf, 0x72, 0x6f, 0x20, 0xd4, 0x36, 0xe8, 0x13, 0xb9, 0xbc, 0xa5, 0x57, 0x74, 0x51, 0x49, 0xf5, 0xb2, 0xdf, 0x7c, 0x61, 0x19, 0x2, 0x41, 0xdb, 0x74, 0xdd, 0x2c, 0xd3, 0xbf, 0x69, 0x68, 0xd, 0xf8, 0x85, 0x6c, 0x5e, 0x8, 0x20, 0x71, 0x4, 0xba, 0x30, 0xeb, 0xc9, 0xf0, 0xff, 0x79, 0x37, 0x23, 0x8a, 0x38, 0xa0, 0x91, 0x8, 0xd7, 0xc6, 0x8a, 0x36, 0xd0, 0x43, 0x93, 0x5e, 0x28, 0xe2, 0x48, 0x9d, 0xd3, 0xbc, 0xec, 0x3b, 0x40, 0xb0, 0x17, 0xf, 0xc9, 0x19, 0x91, 0x27, 0x78, 0xd2, 0x30, 0x7, 0x80, 0xcb, 0xbd, 0xa6, 0x61, 0x7, 0xd9, 0x2d, 0x64, 0x5b, 0x84, 0xd9, 0x63, 0xad, 0xbf, 0x2c, 0xa6, 0x69, 0x87, 0x87, 0xbb, 0xc8, 0xdb, 0xde, 0xbc, 0x9e, 0x39, 0x4, 0x58, 0x23, 0x9b, 0x36, 0xea, 0x5d, 0xf5, 0xab, 0xa9, 0x64, 0xd6, 0xc0, 0xd6, 0x7d, 0x94, 0x4b, 0x56, 0x8c, 0x99, 0x3, 0xb8, 0x4b, 0xdd, 0xc, 0x4, 0x79, 0x3c, 0xa, 0x0, 0x0, 0x0, 0x0, 0x0}
	
	assert.Equal(t, actualBytes, bytes)
}
