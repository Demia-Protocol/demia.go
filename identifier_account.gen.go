package iotago

// Code generated by go generate; DO NOT EDIT. Check gen/ directory instead.

import (
	"encoding/hex"
	"sync"

	"golang.org/x/crypto/blake2b"

	"github.com/iotaledger/hive.go/ierrors"
	"github.com/iotaledger/iota.go/v4/hexutil"
)

const (
	// AccountIDLength defines the length of an AccountID.
	AccountIDLength = blake2b.Size256
)

var (
	EmptyAccountID = AccountID{}

	ErrInvalidAccountIDLength = ierrors.New("invalid AccountID length")
)

// AccountID is a 32 byte hash value.
type AccountID [AccountIDLength]byte

type AccountIDs []AccountID

// AccountIDFromData returns a new AccountID for the given data by hashing it with blake2b.
func AccountIDFromData(data []byte) AccountID {
	return blake2b.Sum256(data)
}

// AccountIDFromHexString converts the hex to an AccountID representation.
func AccountIDFromHexString(hex string) (AccountID, error) {
	bytes, err := hexutil.DecodeHex(hex)
	if err != nil {
		return AccountID{}, err
	}

	a, _, err := AccountIDFromBytes(bytes)

	return a, err
}

// MustAccountIDFromHexString converts the hex to an AccountID representation.
func MustAccountIDFromHexString(hex string) AccountID {
	a, err := AccountIDFromHexString(hex)
	if err != nil {
		panic(err)
	}

	return a
}

func AccountIDFromBytes(bytes []byte) (AccountID, int, error) {
	var a AccountID
	if len(bytes) < AccountIDLength {
		return a, 0, ErrInvalidAccountIDLength
	}
	copy(a[:], bytes)

	return a, len(bytes), nil
}

func (a AccountID) Bytes() ([]byte, error) {
	return a[:], nil
}

func (a AccountID) MarshalText() (text []byte, err error) {
	dst := make([]byte, hex.EncodedLen(len(AccountID{})))
	hex.Encode(dst, a[:])

	return dst, nil
}

func (a *AccountID) UnmarshalText(text []byte) error {
	_, err := hex.Decode(a[:], text)

	return err
}

// Empty tells whether the AccountID is empty.
func (a AccountID) Empty() bool {
	return a == EmptyAccountID
}

// ToHex converts the AccountID to its hex representation.
func (a AccountID) ToHex() string {
	return hexutil.EncodeHex(a[:])
}

func (a AccountID) String() string {
	return a.Alias()
}

var (
	// accountidAAliases contains a dictionary of AccountIDs associated to their human-readable alias.
	accountidAAliases = make(map[AccountID]string)

	// accountidAAliasesMutex is the mutex that is used to synchronize access to the previous map.
	accountidAAliasesMutex = sync.RWMutex{}
)

// RegisterAlias allows to register a human-readable alias for the AccountID which will be used as a replacement for
// the String method.
func (a AccountID) RegisterAlias(alias string) {
	accountidAAliasesMutex.Lock()
	defer accountidAAliasesMutex.Unlock()

	accountidAAliases[a] = alias
}

// Alias returns the human-readable alias of the AccountID (or the hex encoded bytes if no alias was set).
func (a AccountID) Alias() (alias string) {
	accountidAAliasesMutex.RLock()
	defer accountidAAliasesMutex.RUnlock()

	if existingAlias, exists := accountidAAliases[a]; exists {
		return existingAlias
	}

	return a.ToHex()
}

// UnregisterAlias allows to unregister a previously registered alias.
func (a AccountID) UnregisterAlias() {
	accountidAAliasesMutex.Lock()
	defer accountidAAliasesMutex.Unlock()

	delete(accountidAAliases, a)
}

// UnregisterAccountIDAliases allows to unregister all previously registered aliases.
func UnregisterAccountIDAliases() {
	accountidAAliasesMutex.Lock()
	defer accountidAAliasesMutex.Unlock()

	accountidAAliases = make(map[AccountID]string)
}
