package iotago

// Code generated by go generate; DO NOT EDIT. Check gen/ directory instead.

import (
	"bytes"

	"github.com/iotaledger/hive.go/lo"
	"github.com/iotaledger/hive.go/serializer/v2"
)

type GovernorMetadataFeatureEntriesKey string
type GovernorMetadataFeatureEntriesValue []byte
type GovernorMetadataFeatureEntries map[GovernorMetadataFeatureEntriesKey]GovernorMetadataFeatureEntriesValue

// GovernorMetadataFeature is a feature which simply holds binary data to be freely
// interpreted by higher layer applications.
type GovernorMetadataFeature struct {
	Entries GovernorMetadataFeatureEntries `serix:""`
}

func (m GovernorMetadataFeature) Clone() Feature {
	copiedMap := make(GovernorMetadataFeatureEntries)
	for key, value := range m.Entries {
		copiedMap[key] = lo.CopySlice(value)
	}

	return &GovernorMetadataFeature{
		Entries: copiedMap,
	}
}

func (m GovernorMetadataFeature) StorageScore(_ *StorageScoreStructure, _ StorageScoreFunc) StorageScore {
	return 0
}

func (m GovernorMetadataFeature) WorkScore(_ *WorkScoreParameters) (WorkScore, error) {
	return 0, nil
}

func (m GovernorMetadataFeature) Equal(other Feature) bool {
	otherFeat, is := other.(*GovernorMetadataFeature)
	if !is {
		return false
	}

	if len(m.Entries) != len(otherFeat.Entries) {
		return false
	}

	for key, value := range m.Entries {
		otherValue, exists := otherFeat.Entries[key]
		if !exists {
			return false
		}

		if !bytes.Equal(value, otherValue) {
			return false
		}
	}

	return true
}

func (m GovernorMetadataFeature) Type() FeatureType {
	return FeatureMetadataGovernor
}

func (m GovernorMetadataFeature) mapSize() int {
	var size int

	// Map Length
	size += serializer.SmallTypeDenotationByteSize
	for key, value := range m.Entries {
		// Key Length + Key + Value Length + Value
		size += serializer.SmallTypeDenotationByteSize + len(key) + serializer.UInt16ByteSize + len(value)
	}

	return size
}

func (m GovernorMetadataFeature) Size() int {
	// FeatureType + Entries
	return serializer.SmallTypeDenotationByteSize + m.mapSize()
}
